# vmtag is a docker image tag for VictoriaMetrics components,
# which run inside the prometheus-benchmark - e.g. vmagent, vmalert, vmsingle.
vmtag: "v1.108.1"

# nodeSelector is an optional node selector for placing benchmark pods.
nodeSelector: {}
  # kubernetes.io/hostname: ip-10-180-24-13

# targetsCount defines the number of nodeexporter instances to scrape by every benchmark pod.
# This option allows to configure the number of active time series to push to remoteStorages.
# Every nodeexporter exposes around 1230 unique metrics, so when targetsCount
# is set to 1000, then the benchmark generates around 1230*1000=1.23M active time series.
# See also writeReplicas and writeURLReplicas options.
targetsCount: 5000

# scrapeInterval defines how frequently to scrape nodeexporter targets.
# This option allows to configure data ingestion rate per every remoteStorages.
# For example, if the benchmark generates 1.23M active time series and scrapeInterval
# is set to 10s, then the data ingestion rate equals to 1.23M/10s = 123K samples/sec.
# See also writeReplicas and writeURLReplicas options.
scrapeInterval: 15s

# queryInterval is how often to send queries from files/alerts.yaml to remoteStorages.readURL
# This option can be used for tuning read load at remoteStorages.
# It is a good rule of thumb to keep it in sync with scrapeInterval.
queryInterval: 15s

# scrapeConfigUpdatePercent is the percent of nodeexporter targets
# which are updated with unique label on every scrape config update
# (see scrapeConfigUpdateInterval).
# This option allows tuning time series churn rate.
# For example, if scrapeConfigUpdatePercent is set to 1 for targetsCount=1000,
# then around 10 targets gets updated labels on every scrape config update.
# This generates around 1230*10=12300 new time series every scrapeConfigUpdateInterval.
scrapeConfigUpdatePercent: 1

# scrapeConfigUpdateInterval specifies how frequently to update labels
# across scrapeConfigUpdatePercent nodeexporter targets.
# This option allows tuning time series churn rate.
# For example, if scrapeConfigUpdateInterval is set to 10m for targetsCount=1000
# and scrapeConfigUpdatePercent=1, then around 10 targets gets updated labels every 10 minutes.
# This generates around 1230*10=12300 new time series every 10 minutes.
scrapeConfigUpdateInterval: 10m

# writeConcurrency is an optional number of concurrent tcp connections
# for sending the scraped metrics to remoteStorage.writeURL.
# Increase this value if there is a high network latency between prometheus-benchmark
# components and remoteStorage.wirteURL.
# If this value isn't set, then the number of concurrent connections
# for sending the scraped metrics is determined automatically.
writeConcurrency: 0

# writeReplicas is an optional number of pod writers to run.
# Each replica scrapes targetsCount targets and has
# its own extra `replica` label attached to time series stored to remote storage.
# This option is useful for scaling the writers horizontally.
# See also writeURLReplicas option.
writeReplicas: 1

# writeReplicaMem is the memory limit per each pod writer.
# See writeReplicas option.
writeReplicaMem: "4Gi"

# writeReplicaCPU is the CPU limit per each pod writer.
# See writeReplicas option.
writeReplicaCPU: 2

# remoteStorages contains a named list of Prometheus-compatible systems to test.
# These systems must support data ingestion via Prometheus remote_write protocol.
# These systems must also support Prometheus querying API if query performance
# needs to be measured additionally to data ingestion performance.
remoteStorages:
  # the name of the remote storage to test.
  # The name is added to remote_storage_name label at collected metrics
  vm:
    writeURL: "http://vms-victoria-metrics-single-server.vm.svc.cluster.local:8428/api/v1/write"
    readURL: "http://vms-victoria-metrics-single-server.vm.svc.cluster.local:8428/"

  mimir:
    writeURL: "http://mimir-nginx.mimir.svc.cluster.local/api/v1/push"
    readURL: "http://mimir-nginx.mimir.svc.cluster.local/prometheus"
    vmagentExtraFlags:
      - "--remoteWrite.queues=1"

  prom:
    writeURL: "http://prom-prometheus-server.prom.svc.cluster.local/api/v1/write"
    readURL: "http://prom-prometheus-server.prom.svc.cluster.local/"
    vmagentExtraFlags:
      - "--remoteWrite.queues=1"
